// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.Game = (function(superClass) {
  extend(Game, superClass);

  function Game() {
    return Game.__super__.constructor.apply(this, arguments);
  }

  Game.prototype.initialize = function(deck) {
    this.set('playerHand', deck.dealPlayer());
    this.set('dealerHand', deck.dealDealer());
    this.get('playerHand').on('hit', this.checkPlayersHand, this);
    return this.get('playerHand').on('stand', this.compareHands, this);
  };

  Game.prototype.bust = function(check) {
    if (check.minScore() > 21) {
      return true;
    } else {
      return false;
    }
  };

  Game.prototype.dealerWins = function() {
    this.set('message', 'Try Again!!');
    return this.set('winner', 'Dealer');
  };

  Game.prototype.playerWins = function() {
    this.set('message', 'You Win!!');
    return this.set('winner', 'Player');
  };

  Game.prototype.tieScore = function() {
    this.set('message', 'it is a tie!!!');
    return this.set('winner', 'tie');
  };

  Game.prototype.checkPlayersHand = function() {
    if (this.bust(this.get('playerHand'))) {
      return this.dealerWins();
    }
  };

  Game.prototype.dealerPlay = function() {
    var dealerHand, score0, score1;
    dealerHand = this.get('dealerHand');
    score0 = dealerHand.scores()[0];
    score1 = dealerHand.scores()[1];
    if (score0 < 17 && (score1 < 17 || score1 > 21)) {
      dealerHand.hit();
      return this.dealerPlay();
    }
  };

  Game.prototype.compareHands = function() {
    this.get('dealerHand').at(0).flip();
    this.dealerPlay();
    if (this.bust(this.get('dealerHand'))) {
      return this.playerWins();
    } else if (this.get('playerHand').bestScore() > this.get('dealerHand').bestScore()) {
      return this.playerWins();
    } else if (this.get('playerHand').bestScore() === this.get('dealerHand').bestScore()) {
      return this.tieScore();
    } else {
      return this.dealerWins();
    }
  };

  return Game;

})(Backbone.Model);
